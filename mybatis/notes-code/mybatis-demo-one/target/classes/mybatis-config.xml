<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--
    properties:
    属性是可以外部配置并动态替换的，既可以在典型的java属性文件中(如db.properties)配置, 也可以通过properties元素的子元素来传递
    1：通过java属性文件配置
    <properties resource="db.properties"></properties>
    2：通过properties元素的子元素
    <properties>
      <property name="username" value="dev_user"/>
      <property name="password" value="F2Fa3!33TYyg"/>
    </properties>
    3：组合配置
    <properties resource="db.properties">
      <property name="username" value="dev_user"/>
      <property name="password" value="F2Fa3!33TYyg"/>
    </properties>
    4: 属性优先级：通过方法参数传递的属性具有最高优先级，resource/url 属性中指定的配置文件次之，最低优先级的是 properties属性中指定的属性。
    5: 可以通过 ':' 为属性指定占位符 ${username:ut_user}。但需求明确开启此功能
    <properties resource="org/mybatis/example/config.properties">
       <property name="org.apache.ibatis.parsing.PropertyParser.enable-default-value" value="true"/>
    </properties>

    -->
    <properties resource="db.properties"></properties>

    <!--
    settings:
     1: settings 是myBatis中非常重要的调整设置，可以改变myBatis运行时的行为，如缓存，开启驼峰命名规则等
     2：常用的设置有：
     1）useGeneratedKeys：自动生成主键
     2）defaultStatementTimeout：设置超时时间，决定驱动等待数据库响应的秒数
     3）mapUnderscoreToCamelCase：开启驼峰，即从经典数据库列名A_Column 到经典java数项目aColumn的映射

    -->

    <settings>
        <setting name="mapUnderscoreToCamelCase" value="true"/>
    </settings>

    <!--
    typeAliases：类型别名
     1. 别名，即为java类型设置一个短的名字，只和xml配置有关，可以减少类完全限定名的冗余。
     2. 例如，配置属性：<typeAlias type="com.itshizhan.beans.Employee" alias="employee"></typeAlias>，
        则xml中可以使用Employee或employee 代替全类名，
        如： <select id="selectEmployee" resultType="employee"> sql 语句</select>
     3. 也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如:
         <typeAliases>
          <package name="com.itshizhan.beans"/>
         </typeAliases>
         每一个在包 com.itshizhan.beans 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名
     4. mybatis 为java常见的类型内置了别名（它们都是大小写不敏感的），参见：http://www.mybatis.org/mybatis-3/zh/configuration.html#typeAliases


    -->

    <typeAliases>
        <typeAlias type="com.itshizhan.beans.Employee" alias="employee"></typeAlias>
    </typeAliases>


    <!--
    typeHandlers：
    无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时，
    都会用类型处理器将获取的值以合适的方式转换成 Java 类型。参见：http://www.mybatis.org/mybatis-3/zh/configuration.html#typeHandlers

    1：如果需要重写类型处理器，或创建自定义类型处理器来支持非标准类型，可以：
        1）实现 org.apache.ibatis.type.TypeHandler 接口
        2）继承 org.apache.ibatis.type.BaseTypeHandler 类
        例如：

        //ExampleTypeHandler.java
        @MappedJdbcTypes(JdbcType.VARCHAR)
           public class ExampleTypeHandler extends BaseTypeHandler<String> {
        }
        <typeHandlers>
          <typeHandler handler="org.mybatis.example.ExampleTypeHandler"/>
        </typeHandlers>

    2：可以通过两种方式来指定被关联的 JDBC 类型：
        1）：在类型处理器的配置元素上增加一个 jdbcType 属性（比如：jdbcType="VARCHAR"）；
        2）：在类型处理器的类上（TypeHandler class）增加一个 @MappedJdbcTypes 注解来指定与其关联的 JDBC 类型列表。
            如果在 jdbcType 属性中也同时指定，则注解方式将被忽略。
    3：若想映射枚举类型 Enum，则需要从 EnumTypeHandler 或者 EnumOrdinalTypeHandler 中选一个来使用。


    -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${mysql.driver}"/>
                <property name="url" value="${mysql.url}"/>
                <property name="username" value="${mysql.username}"/>
                <property name="password" value="${mysql.password}"/>
            </dataSource>
        </environment>
    </environments>
    <mappers>
        <mapper resource="EmployeeMapper.xml"/>
    </mappers>

</configuration>
