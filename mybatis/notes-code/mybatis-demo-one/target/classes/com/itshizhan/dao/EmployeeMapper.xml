<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.itshizhan.dao.EmployeeMapper">
    <!--
    namespace: 名称空间
    id：唯一标识符
    resultType：返回类型
    #{id} 查询参数
    -->
    <select id="selectEmployee" resultType="employee">
      <!--
       1: 可以通过sql 语句设置别名
       2：通过mapUnderscoreToCamelCase 可以驼峰命名
       select id,last_name lastName,gender,email from t_employee where id = #{id}
      -->
      select * from t_employee where id = #{id}

    </select>

    <!--
    select 语言的主要属性：
    1. id: 命名空间中的唯一标识符，可以被用来引用这条语句
    2. parameterType: 参数类型，可选的，因为mybatis可以根据TypeHandler推断出具体传入语句的参数
    3. resultType：语句返回结果的类型完全限定名或别名。
       注意如果是集合情形，那应该是集合可以包含的类型，而不能是集合本身。使用 resultType 或 resultMap，但不能同时使用。
    4. resultMap: 外部 resultMap 的命名引用。结果集的映射是 MyBatis 最强大的特性。
    5. flushCache: 将其设置为 true，任何时候只要语句被调用，都会导致本地缓存和二级缓存都会被清空，默认值：false。
    6. useCache: 将其设置为 true，将会导致本条语句的结果被二级缓存，默认值：对 select 元素为 true。
    7. timeout: 这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为 unset（依赖驱动）
    8. fetchSize: 这是尝试影响驱动程序每次批量返回的结果行数和这个设置值相等。默认值为 unset（依赖驱动）。
    9. statementType: STATEMENT，PREPARED 或 CALLABLE 的一个。
        这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。
    10. resultSetType:  FORWARD_ONLY，SCROLL_SENSITIVE 或 SCROLL_INSENSITIVE 中的一个，默认值为 unset （依赖驱动）。
    11. databaseId: 如果配置了 databaseIdProvider，MyBatis 会加载所有的不带 databaseId 或匹配当前 databaseId 的语句；
        如果带或者不带的语句都有，则不带的会被忽略。
    12. resultOrdered： 仅针对嵌套结果 select 语句适用：如果为 true，就是假设包含了嵌套结果集或是分组了，
         这样的话当返回一个主结果行的时候，就不会发生有对前面结果集的引用的情况。
    13. resultSets：这个设置仅对多结果集的情况适用，它将列出语句执行后返回的结果集并每个结果集给一个名称，名称是逗号分隔的。
    -->

    <select id="selectEmpoyeeById" parameterType="int"  resultType="employee">
        SELECT * FROM t_employee WHERE id = #{id}
    </select>

    <!--
    Insert, Update, Delete 属性：
    1. useGeneratedKeys：（仅对 insert 和 update 有用）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键。
       默认值：false。
    2. keyProperty: （仅对 insert 和 update 有用）唯一标记一个属性，MyBatis 会通过 getGeneratedKeys 的返回值或者通过 insert 语句的 selectKey 子元素设置它的键值，
       默认：unset。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。
    3. keyColumn: （仅对 insert 和 update 有用）通过生成的键值设置表中的列名

    -->


    <!--
    如果你的数据库支持自动生成主键的字段（比如 MySQL 和 SQL Server），那么你可以设置 useGeneratedKeys=”true”，
    然后再把 keyProperty 设置到目标属性上就OK了
    -->
    <insert id="insertEmployee">
        insert into t_employee (last_name,gender,email)
        values (#{lastName},#{gender},#{email})
    </insert>

    <!--
    selectKey属性:
    <selectKey
      keyProperty="id"
      resultType="int"
      order="BEFORE"
      statementType="PREPARED">

     1. keyProperty： selectKey 语句结果应该被设置的目标属性。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。
     2. keyColumn： 匹配属性的返回结果集中的列名称。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。
     3. resultType：结果的类型。
     4. order：这可以被设置为 BEFORE 或 AFTER。如果设置为 BEFORE，那么它会首先选择主键，设置 keyProperty 然后执行插入语句。
            如果设置为 AFTER，那么先执行插入语句，然后是 selectKey 元素 -这和像 Oracle 的数据库相似，在插入语句内部可能有嵌入索引调用。
     5. statementType：与前面相同，MyBatis 支持 STATEMENT，PREPARED 和 CALLABLE 语句的映射类型，分别代表 PreparedStatement 和 CallableStatement 类型。


    -->

    <!--
    sql：
    -->

    <!-- Emplyee selectEmployeeLikeName(Sting lastName); -->

    <!--
    1. 从mybatis 3.4.4 开始，多参数传递必须是  [arg1, arg0, param1, param2]， 不能是 #{0}，#{1} 了


    -->

    <select id="selectEmployeeLikeName" resultType="employee">
      SELECT * FROM t_employee WHERE gender  = #{arg0} AND t_employee.last_name LIKE #{arg1}
    </select>

    <select id="selectEmployeeLikeNamePlus" resultType="employee">
        SELECT * FROM t_employee WHERE gender  = #{arg0} AND t_employee.last_name LIKE #{arg1}
    </select>


</mapper>
