<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--
    properties:
    属性是可以外部配置并动态替换的，既可以在典型的java属性文件中(如db.properties)配置, 也可以通过properties元素的子元素来传递
    1：通过java属性文件配置
    <properties resource="db.properties"></properties>
    2：通过properties元素的子元素
    <properties>
      <property name="username" value="dev_user"/>
      <property name="password" value="F2Fa3!33TYyg"/>
    </properties>
    3：组合配置
    <properties resource="db.properties">
      <property name="username" value="dev_user"/>
      <property name="password" value="F2Fa3!33TYyg"/>
    </properties>
    4: 属性优先级：通过方法参数传递的属性具有最高优先级，resource/url 属性中指定的配置文件次之，最低优先级的是 properties属性中指定的属性。
    5: 可以通过 ':' 为属性指定占位符 ${username:ut_user}。但需求明确开启此功能
    <properties resource="org/mybatis/example/config.properties">
       <property name="org.apache.ibatis.parsing.PropertyParser.enable-default-value" value="true"/>
    </properties>

    -->
    <properties resource="db.properties"></properties>

    <!--
    settings:
     1: settings 是myBatis中非常重要的调整设置，可以改变myBatis运行时的行为，如缓存，开启驼峰命名规则等
     2：常用的设置有：
     1）useGeneratedKeys：自动生成主键
     2）defaultStatementTimeout：设置超时时间，决定驱动等待数据库响应的秒数
     3）mapUnderscoreToCamelCase：开启驼峰，即从经典数据库列名A_Column 到经典java数项目aColumn的映射

    -->

    <settings>
        <setting name="mapUnderscoreToCamelCase" value="true"/>
    </settings>

    <!--
    typeAliases：类型别名
     1. 别名，即为java类型设置一个短的名字，只和xml配置有关，可以减少类完全限定名的冗余。
     2. 例如，配置属性：<typeAlias type="com.itshizhan.beans.Employee" alias="employee"></typeAlias>，
        则xml中可以使用Employee或employee 代替全类名，
        如： <select id="selectEmployee" resultType="employee"> sql 语句</select>
     3. 也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如:
         <typeAliases>
          <package name="com.itshizhan.beans"/>
         </typeAliases>
         每一个在包 com.itshizhan.beans 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名
     4. mybatis 为java常见的类型内置了别名（它们都是大小写不敏感的），参见：http://www.mybatis.org/mybatis-3/zh/configuration.html#typeAliases


    -->

    <typeAliases>
        <typeAlias type="com.itshizhan.beans.Employee" alias="employee"></typeAlias>
    </typeAliases>


    <!--
    typeHandlers：
    无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时，
    都会用类型处理器将获取的值以合适的方式转换成 Java 类型。参见：http://www.mybatis.org/mybatis-3/zh/configuration.html#typeHandlers

    1：如果需要重写类型处理器，或创建自定义类型处理器来支持非标准类型，可以：
        1）实现 org.apache.ibatis.type.TypeHandler 接口
        2）继承 org.apache.ibatis.type.BaseTypeHandler 类
        例如：

        //ExampleTypeHandler.java
        @MappedJdbcTypes(JdbcType.VARCHAR)
           public class ExampleTypeHandler extends BaseTypeHandler<String> {
        }
        <typeHandlers>
          <typeHandler handler="org.mybatis.example.ExampleTypeHandler"/>
        </typeHandlers>

    2：可以通过两种方式来指定被关联的 JDBC 类型：
        1）：在类型处理器的配置元素上增加一个 jdbcType 属性（比如：jdbcType="VARCHAR"）；
        2）：在类型处理器的类上（TypeHandler class）增加一个 @MappedJdbcTypes 注解来指定与其关联的 JDBC 类型列表。
            如果在 jdbcType 属性中也同时指定，则注解方式将被忽略。
    3：若想映射枚举类型 Enum，则需要从 EnumTypeHandler 或者 EnumOrdinalTypeHandler 中选一个来使用。


    -->

    <!--

    1. 对象工厂（objectFactory）：参加：http://www.mybatis.org/mybatis-3/zh/configuration.html#objectFactory

    2. 插件（plugins）：
        MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：

        1）Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)
        2）ParameterHandler (getParameterObject, setParameters)
        3）ResultSetHandler (handleResultSets, handleOutputParameters)
        4）StatementHandler (prepare, parameterize, batch, update, query)
        MyBatis使用插件是非常简单的，只需实现 Interceptor 接口，并指定想要拦截的方法签名即可
    -->


    <!--
     配置环境（environments）：
     1. mybatis 可以配置多种环境，将 SQL 映射应用于多种数据库之中。
     2. 尽管可以配置多个环境，每个 SqlSessionFactory 实例只能选择其一。
        如果你想连接两个数据库，就需要创建两个 SqlSessionFactory 实例，每个数据库对应一个,例如
        SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment);
        SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment, properties);
        如果忽略了环境参数，那么默认环境将会被加载
     3. 默认的环境 ID（比如:default="development"）。
     4. 每个 environment 元素定义的环境 ID（比如:id="development"）。
     5. 每个环境须配置transactionManager 和 dataSource。


     事物管理器：
     1. 在 MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBC|MANAGED]”）
        1）JDBC – 这个配置就是直接使用了 JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。
        2）MANAGED – 这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期
     2. 如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器， 因为 Spring 模块会使用自带的管理器来覆盖前面的配置


    数据源（dataSource）：
    dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。
    有三种内建的数据源类型（也就是 type=”[UNPOOLED|POOLED|JNDI]”）：

    1. UNPOOLED：这个数据源的实现只是每次被请求时打开和关闭连接
    2. POOLED：这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。
       这是一种使得并发 Web 应用快速响应请求的流行处理方式。
       具体属性配置参见：http://www.mybatis.org/mybatis-3/zh/configuration.html#environments
    3. JNDI：这个数据源的实现是为了能在如 EJB 或应用服务器这类容器中使用

    -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${mysql.driver}"/>
                <property name="url" value="${mysql.url}"/>
                <property name="username" value="${mysql.username}"/>
                <property name="password" value="${mysql.password}"/>
            </dataSource>
        </environment>
    </environments>

    <!--
    databaseIdProvider 数据库厂商标识：
    1. MyBatis 可以根据不同的数据库厂商执行不同的语句，这种多厂商的支持是基于映射语句中的 databaseId 属性
    2. 如果同时找到带有 databaseId 和不带 databaseId 的相同语句，则后者会被舍弃。
    例如：
    <databaseIdProvider type="DB_VENDOR">
      <property name="SQL Server" value="sqlserver"/>
      <property name="DB2" value="db2"/>
      <property name="Oracle" value="oracle" />
    </databaseIdProvider>

    -->

    <!--
    daopers）：
    告诉 MyBatis 到哪里去找映射文件。
    1）： 使用相对于类路径的资源引用
 daopers>
   mapperspper resource="org/mybatis/builder/AuthorMapper.xml"/>
   mapperspper resource="org/mybatis/builder/BlogMapper.xml"/>
   mapperspper resource="org/mybatis/builder/PostMapper.xml"/>
  daopers>

    2）： 使用完全限定资源定位符（URL）
 daopers>
   mapperspper url="file:///daopers/AuthorMapper.xml"/>
   mapperspper url="file:///daopers/BlogMapper.xml"/>
   mapperspper url="file:///daopers/PostMapper.xml"/>
  daopers>

    3）：使用映射器接口实现类的完全限定类名
 daopers>
   mapperspper class="org.mybatis.builder.AuthorMapper"/>
   mapperspper class="org.mybatis.builder.BlogMapper"/>
   mapperspper class="org.mybatis.builder.PostMapper"/>
  daopers>

    4) :将包内的映射器接口实现全部注册为映射器
 daopers>
      <package name="org.mybatis.builder"/>
  daopers>

    -->

    <mappers>
        <mapper class="com.itshizhan.dao.EmployeeMapper"/>
    </mappers>

</configuration>
